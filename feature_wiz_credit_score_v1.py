# -*- coding: utf-8 -*-
"""feature_wiz_credit_score.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q-yVl5hgq5Kx3IMEMQTFLg01Oms5vGZd
"""

import pandas as pd

pip install featurewiz

df = pd.read_csv('CC_Default.csv')

# prompt: split this data frame into train and test using strify on target which is the column  default payment next month, use sk learn train test split.

from sklearn.model_selection import train_test_split

X = df.drop('default payment next month', axis=1)
y = df['default payment next month']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

from sklearn.metrics import f1_score, accuracy_score

from sklearn.ensemble import RandomForestClassifier

# Define the classifier with default parameters
model = RandomForestClassifier()

# Train the model (assuming your code already has this)
model.fit(X_train, y_train)

# Predictions on train and test data
y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

# Calculate F1 score and accuracy for train and test sets
train_f1 = f1_score(y_train, y_pred_train)
train_accuracy = accuracy_score(y_train, y_pred_train)
test_f1 = f1_score(y_test, y_pred_test)
test_accuracy = accuracy_score(y_test, y_pred_test)

# Print the results
print("Test Accuracy:", test_accuracy)

from featurewiz import FeatureWiz
fwiz = FeatureWiz(feature_engg = ['interactions', 'groupby', 'target'], nrows=None, transform_target=True, scalers="std",
        		category_encoders="auto", add_missing=False, verbose=0, imbalanced=False, corr_limit = 0.7 ,
                ae_options={})
X_train_selected, y_train = fwiz.fit_transform(X_train, y_train)
X_test_selected = fwiz.transform(X_test)
### get list of selected features ###
fwiz.features

from sklearn.metrics import f1_score, accuracy_score

from sklearn.ensemble import RandomForestClassifier

# Define the classifier with default parameters
model = RandomForestClassifier()

# Train the model (assuming your code already has this)
model.fit(X_train_selected, y_train)

# Predictions on train and test data
y_pred_train = model.predict(X_train_selected)
y_pred_test = model.predict(X_test_selected)

# Calculate F1 score and accuracy for train and test sets
train_f1 = f1_score(y_train, y_pred_train)
train_accuracy = accuracy_score(y_train, y_pred_train)
test_f1 = f1_score(y_test, y_pred_test)
test_accuracy = accuracy_score(y_test, y_pred_test)

# Print the results
# print("Train F1 Score:", train_f1)
# print("Train Accuracy:", train_accuracy)
# print("Test F1 Score:", test_f1)
print("Test Accuracy:", test_accuracy)

# model registry ->
# raw features -> test accuracy 0.78
# raw features corr_limit = 0.7 and no imbalance -> test accuracy 0.816777 ( greater than normal RFclassifier score)

# reference
#  https://pypi.org/project/featurewiz/